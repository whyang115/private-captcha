{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","value","setValue","loading","setLoading","randstr","setStr","getCaptcha","Math","random","toString","slice","axios","get","params","responseType","then","res","buffer","blob","Blob","type","file","FileReader","onload","e","base64","target","result","readAsDataURL","finally","useEffect","className","onChange","onClick","style","backgroundImage","size","window","webkit","messageHandlers","Save","postMessage","Android","disabled","ticket","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iPA6EeA,MAhEf,WAAgB,IAAD,EACWC,qBADX,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIaN,mBAAS,IAJtB,mBAINO,EAJM,KAIGC,EAJH,KAoBb,SAASC,IACP,IAAMF,EAvBDG,KAAKC,SAASC,SAAS,IAAIC,MAAM,GAwBtCL,EAAOD,GACHF,IACJC,GAAW,GACXQ,IACGC,IAAI,oDAAqD,CAAEC,OAAQ,CAAET,WAAWU,aAAc,gBAC9FC,MAAK,SAAAC,GACJ,IAAMC,EAASD,EAAIlB,KACboB,EAAO,IAAIC,KAAK,CAACF,GAAS,CAAEG,KAAM,cAClCC,EAAO,IAAIC,WACjBD,EAAKE,OAAS,SAAAC,GACZ,IAAMC,EAASD,EAAEE,OAAOC,OACxB5B,EAAQ0B,IAEVJ,EAAKO,cAAcV,MAEpBW,SAAQ,WACP1B,GAAW,OAMjB,OAHA2B,qBAAU,WACRxB,MACC,IAED,yBAAKyB,UAAU,OACb,yBAAKA,UAAU,SAAS,wCACxB,kBAAC,IAAD,CAAO/B,MAAOA,EAAOgC,SAAU,SAAAR,GAAC,OAAIvB,EAASuB,EAAEE,OAAO1B,UACtD,yBAAK+B,UAAU,UAAUE,QAAS3B,EAAY4B,MAAO,CAAEC,gBAAgB,OAAD,OAASrC,EAAT,OACnEI,GAAW,kBAAC,IAAD,CAAMkC,KAAK,WAEzB,yBAAKL,UAAU,OAAOE,QAAS3B,GAA/B,8CAGA,yBAAKyB,UAAU,QACb,kBAAC,IAAD,CAAQE,QA1CE,WACVrB,cAAIyB,OAAQ,CAAC,SAAU,kBAAmB,OAAQ,gBACpDA,OAAOC,OAAOC,gBAAgBC,KAAKC,cAEnCJ,OAAOK,QAAQF,SAsCb,gBACA,kBAAC,IAAD,CAAQpB,KAAK,UAAUuB,UAAW3C,EAAOiC,QAnDlC,WACX,IAAMnC,EAAO,CAAE8C,OAAQ5C,EAAOI,WAC1BQ,cAAIyB,OAAQ,CAAC,SAAU,kBAAmB,OAAQ,gBACpDA,OAAOC,OAAOC,gBAAgBC,KAAKC,YAAY3C,GAE/CuC,OAAOK,QAAQF,KAAK1C,KA8ClB,mBCzDY+C,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.86e262da.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Input, Spin, Button } from 'antd';\nimport { get } from 'lodash';\nimport axios from 'axios';\n\n// const instance = axios.create({\n//   baseURL: 'https://www.mingdao.com/api/',\n// });\n\nconst getStr = () => {\n  return Math.random().toString(16).slice(2);\n};\nfunction App() {\n  const [data, setData] = useState();\n  const [value, setValue] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [randstr, setStr] = useState('');\n  const onOk = () => {\n    const data = { ticket: value, randstr };\n    if (get(window, ['webkit', 'messageHandlers', 'Save', 'postMessage'])) {\n      window.webkit.messageHandlers.Save.postMessage(data);\n    } else {\n      window.Android.Save(data);\n    }\n  };\n  const onClose = () => {\n    if (get(window, ['webkit', 'messageHandlers', 'Save', 'postMessage'])) {\n      window.webkit.messageHandlers.Save.postMessage();\n    } else {\n      window.Android.Save();\n    }\n  };\n  function getCaptcha() {\n    const randstr = getStr();\n    setStr(randstr);\n    if (loading) return;\n    setLoading(true);\n    axios\n      .get('http://api.dev.mingdao.net/oauth2/genImageCaptcha', { params: { randstr }, responseType: 'arraybuffer' })\n      .then(res => {\n        const buffer = res.data;\n        const blob = new Blob([buffer], { type: 'image/gif' });\n        const file = new FileReader();\n        file.onload = e => {\n          const base64 = e.target.result;\n          setData(base64);\n        };\n        file.readAsDataURL(blob);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n  useEffect(() => {\n    getCaptcha();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div className=\"title\">{'请输入验证码'}</div>\n      <Input value={value} onChange={e => setValue(e.target.value)} />\n      <div className=\"imgWrap\" onClick={getCaptcha} style={{ backgroundImage: `url(${data})` }}>\n        {loading && <Spin size=\"large\" />}\n      </div>\n      <div className=\"text\" onClick={getCaptcha}>\n        看不清，换一张\n      </div>\n      <div className=\"btns\">\n        <Button onClick={onClose}>取消</Button>\n        <Button type=\"primary\" disabled={!value} onClick={onOk}>\n          确认\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}